{"version":3,"file":"yieldToMain.browser.js","sources":["../src/yieldToMain.js"],"sourcesContent":["/**\n * Yields execution to the main thread, allowing other tasks to be processed.\n * Uses scheduler.yield() if available, falling back to setTimeout.\n *\n * @example\n * // Basic usage\n * await yieldToMain();\n *\n * @example\n * // Use in a loop to prevent blocking\n * async function processItems(items) {\n *   for (const item of items) {\n *     await yieldToMain();\n *     // Process item\n *   }\n * }\n *\n * @example\n * // Use with heavy computation\n * async function heavyTask() {\n *   for (let i = 0; i < 1000000; i++) {\n *     if (i % 1000 === 0) await yieldToMain();\n *     // Compute something\n *   }\n * }\n *\n * @returns {Promise<void>} A promise that resolves after yielding to the main thread\n */\nfunction yieldToMain() {\n  // @ts-ignore\n  const scheduler = globalThis.scheduler;\n  if (scheduler && typeof scheduler.yield === 'function') {\n    return scheduler.yield();\n  }\n  return new Promise((resolve) => {\n    setTimeout(resolve, 0);\n  });\n}\n\nexport {yieldToMain as default};\n"],"names":["scheduler","globalThis","yield","Promise","resolve","setTimeout"],"mappings":"0DA4BA,WAEE,MAAMA,EAAYC,WAAWD,UAC7B,OAAIA,GAAwC,mBAApBA,EAAUE,MACzBF,EAAUE,QAEZ,IAAIC,SAASC,IAClBC,WAAWD,EAAS,KAExB"}